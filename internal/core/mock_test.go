// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -destination=mock_test.go -package=core
//

// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"
	model "rpgMonster/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockGPTClient is a mock of GPTClient interface.
type MockGPTClient struct {
	ctrl     *gomock.Controller
	recorder *MockGPTClientMockRecorder
}

// MockGPTClientMockRecorder is the mock recorder for MockGPTClient.
type MockGPTClientMockRecorder struct {
	mock *MockGPTClient
}

// NewMockGPTClient creates a new mock instance.
func NewMockGPTClient(ctrl *gomock.Controller) *MockGPTClient {
	mock := &MockGPTClient{ctrl: ctrl}
	mock.recorder = &MockGPTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPTClient) EXPECT() *MockGPTClientMockRecorder {
	return m.recorder
}

// GetCompletion mocks base method.
func (m *MockGPTClient) GetCompletion(systemContent, userContent string) (model.GPTAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletion", systemContent, userContent)
	ret0, _ := ret[0].(model.GPTAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletion indicates an expected call of GetCompletion.
func (mr *MockGPTClientMockRecorder) GetCompletion(systemContent, userContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletion", reflect.TypeOf((*MockGPTClient)(nil).GetCompletion), systemContent, userContent)
}

// MockDBClient is a mock of DBClient interface.
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient.
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance.
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockDBClient) CheckPassword(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockDBClientMockRecorder) CheckPassword(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockDBClient)(nil).CheckPassword), login, password)
}

// CreateNewUser mocks base method.
func (m *MockDBClient) CreateNewUser(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockDBClientMockRecorder) CreateNewUser(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockDBClient)(nil).CreateNewUser), login, password)
}

// CreateTask mocks base method.
func (m *MockDBClient) CreateTask(ctx context.Context, task *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockDBClientMockRecorder) CreateTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockDBClient)(nil).CreateTask), ctx, task)
}

// UpdateTask mocks base method.
func (m *MockDBClient) UpdateTask(ctx context.Context, task *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockDBClientMockRecorder) UpdateTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockDBClient)(nil).UpdateTask), ctx, task)
}
